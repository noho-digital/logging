// Code generated by "enumer -trimprefix=Format -transform snake -type=Format"; DO NOT EDIT.

//
package logging

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _FormatName = "textjson"

var _FormatIndex = [...]uint8{0, 4, 8}

func (i Format) String() string {
	i -= 1
	if i < 0 || i >= Format(len(_FormatIndex)-1) {
		return fmt.Sprintf("Format(%d)", i+1)
	}
	return _FormatName[_FormatIndex[i]:_FormatIndex[i+1]]
}

var _FormatValues = []Format{1, 2}

var _FormatNames = []string{"text", "json"}

var _FormatNameToValueMap = map[string]Format{
	_FormatName[0:4]: 1,
	_FormatName[4:8]: 2,
}

// FormatString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FormatString(s string) (Format, error) {

	if val, ok := _FormatNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Format values", s)
}

func ParseFormat(s string) (Format, error) {
	return FormatString(s)
}

// FormatValues returns all values of the enum
func FormatValues() []Format {
	return _FormatValues
}

func FormatNames() []string {
	return _FormatNames
}

// IsAFormat returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Format) IsAFormat() bool {
	for _, v := range _FormatValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Format
func (i Format) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Format
func (i *Format) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Format should be a string, got %s", data)
	}

	var err error
	*i, err = FormatString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Format
func (i Format) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Format
func (i *Format) UnmarshalText(text []byte) error {
	var err error
	*i, err = FormatString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for Format
func (i Format) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Format
func (i *Format) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = FormatString(s)
	return err
}

func (i Format) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *Format) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := FormatString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
